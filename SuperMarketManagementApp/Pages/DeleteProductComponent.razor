@page "/deleteproduct/{Id}"
<h3>Delete Product</h3>


@inject UseCases.UseCasesInterfaces.IDeleteProductUseCase deleteProductUseCase
@inject UseCases.UseCasesInterfaces.IViewCategoriesUseCases viewCategoriesUseCases
@inject UseCases.UseCasesInterfaces.IGetCategoryByIdUseCase GetCategoryByIdUseCase
@inject UseCases.DataStorePluginInterfaces.IProductRepository productRepository


@inject NavigationManager navigationManager
@if(product!=null)
{
    <EditForm Model="product"  OnValidSubmit="onValidSubmit">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <ValidationSummary></ValidationSummary>
        <div class ="form-group" style="padding : 5px"  >
            <label for="name"> Name</label>
            <InputText id="name" @bind-Value = "product.Name" class="form-control" readonly></InputText>
        </div>
        <div class ="form-group" style="padding : 5px" readonly>
            <label for="category"> Category</label>
            <InputText id="category" @bind-Value = "categoryName" class="form-control" readonly></InputText>
            
        </div>

        <div class ="form-group" style="padding : 5px">
            <label for="quantity"> Quantity</label>
            <InputNumber id="quantity" @bind-Value = "product.Quantity" class="form-control" readonly></InputNumber>
        </div>
        <div class ="form-group" style="padding : 5px">
            <label for="price"> Price</label>
            <InputNumber id="price" @bind-Value = "product.Price" class="form-control" readonly></InputNumber>
        </div>
        <br>
        <button type="submit" class="btn btn-outline-danger"> Delete </button>
        <button type="button" class="btn btn-secondary" @onclick="OnCancel" > Cancel </button>

    </EditForm>
}

@code {
    [Parameter]
    public string Id { get; set; }
    private Product product;
    private string  categoryName;
    private IEnumerable<Category> categories;
    protected override void OnInitialized()
    {
        base.OnInitialized();

    }
    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        categories = viewCategoriesUseCases.Execute();
        var id = int.Parse(Id);
        product = productRepository.GetProductById(id);
        categoryName = GetCategoryByIdUseCase.getCategorybyId(product.CategoryId.Value).Name;
    }
    protected void onValidSubmit()
    {
        var id = int.Parse(Id);
        deleteProductUseCase.deleteProduct(id);
        navigationManager.NavigateTo("/products");

    }
    private void OnCancel(){
       navigationManager.NavigateTo("/products");

    }

}
